security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        from_database:
            entity:
                class: App\Entity\User
                property: email
        app_user_provider:
            entity:
                class: App\Entity\Admin
                property: adminname
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: from_database

            logout:
                path: app_logout
                    # where to redirect after logout
                target: yenguema
            remember_me:
                secret: '%kernel.secret%'
                path: /
            entry_point: App\Security\AppAuthAuthenticator
            custom_authenticator: App\Security\AppAuthAuthenticator
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin,  roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/job/job_offer_details, roles: ROLE_USER }
        - { path: ^/activity/edit_activity, roles: ROLE_USER }
        - { path: ^/activity/new_activity, roles: ROLE_USER }
        - { path: ^/ads/new_ad, roles: ROLE_USER }
        - { path: ^/apart/new_apartment, roles: ROLE_USER }
        - { path: ^/apart/apartments, roles: ROLE_USER }
        - { path: ^/car/new_car, roles: ROLE_USER }
        - { path: ^/car/car_edit, roles: ROLE_USER }
        - { path: ^/car/change_sale_state, roles: ROLE_USER }
        - { path: ^/application, roles: ROLE_USER }
        - { path: ^/e/book/new_ebook, roles: ROLE_USER }
        - { path: ^/exam/subject/, roles: ROLE_USER }
        - { path: ^/house/villa, roles: ROLE_USER }
        - { path: ^/house/villa/houses, roles: ROLE_USER }
        - { path: ^/ols/new_ols, roles: ROLE_USER }
        - { path: ^/ols/olss, roles: ROLE_USER }
        - { path: ^/park/auto/new_park_auto, roles: ROLE_USER }
        - { path: ^/park/auto/edit_park_auto, roles: ROLE_USER }
        - { path: ^/studio/new_studio, roles: ROLE_USER }
        - { path: ^/studio/studios, roles: ROLE_USER }
        - { path: ^/taxi/new_taxi, roles: ROLE_USER }
        - { path: ^/taxi/edit_taxi, roles: ROLE_USER }
        - { path: ^/teacher/new_teacher, roles: ROLE_USER }
        - { path: ^/teacher/course_ad_edit, roles: ROLE_USER }
        - { path: ^/teacher/course_ad_edit, roles: ROLE_USER }
        - { path: ^/teacher/course_ad_edit, roles: ROLE_USER }
        - { path: ^/travel/new_ride, roles: ROLE_USER }
        - { path: ^/travel/edit_ride, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
